apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'eclipse'


sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
     jcenter()
}

mainClassName = 'org.ros.RosRun'
group = 'com.rosalfred.core'

ext.sharedManifest = manifest {
    attributes('Implementation-Title': archivesBaseName,
            'Implementation-Version': version,
            'Built-By': System.getProperty('user.name'),
            'Built-Date': new Date(),
            'Built-JDK': System.getProperty('java.version')
    )
}

sourceSets {
    main {
        if (project.hasProperty('ament.build_space')) {
            output.classesDir = file(project.getProperty('ament.build_space') + '/classes/main')
            output.resourcesDir = file(project.getProperty('ament.build_space') + '/resources/main')
        }
        java {
            srcDir 'src/main/java'
            srcDir 'src/main/resources/rivescript/src'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
}

dependencies {
    if (project.hasProperty('ament.dependencies')) {
        project.getProperty('ament.dependencies').split(':').each {
            compile fileTree(dir: [it, 'java'].join(File.separator), include: '*.jar')
            testCompile fileTree(dir: [it, 'lib'].join(File.separator), include: '*.jar')
        }
    }

    compile 'joda-time:joda-time:2.3'
    compile 'javax.mail:mail:1.4.5'
    compile 'org.json:json:20090211'
    compile 'com.google.guava:guava:19+'
    compile 'mysql:mysql-connector-java:(5.1,)'
    compile 'commons-logging:commons-logging:1.2'
    if (new File('lib/rivescript-java/build.gradle').exists()) {
        compile project(':lib:rivescript-java')
    }
    compile fileTree(dir: 'lib', include: '*.jar')

    testCompile 'junit:junit:4.12'
}

jar {
    if (project.hasProperty('ament.install_space')) {
        destinationDir = file(
            [project.getProperty('ament.install_space'), 'share', project.name,
            'java'].join(File.separator)
        )
    }
    manifest = project.manifest {
        from sharedManifest
    }
}

test {
    if (project.hasProperty('ament.install_space')) {
        def current = project.getProperty('ament.install_space') + '/..'
        def tree = fileTree(dir: current, include: '**/lib/*.so')
        def tmp = ''

        tree.visit{element ->
            if (element.isDirectory() && element.name.endsWith('lib')) {
                tmp += element.file.absolutePath + ":"
            }
        }

        systemProperty "java.library.path", tmp + ":" + System.properties['java.library.path']
    }
}



eclipse.classpath.file {
    whenMerged { classpath ->
        def containers = classpath.entries.findAll {
            entry -> entry.kind == 'src' && (entry.path == 'src/main/resources' || entry.path == 'src/main/resources/rivescript')
        }

        classpath.entries.removeAll(containers)
    }
}

task prepareSubJar(type: JavaCompile) {
    //copy jar from submodule (submodule not work with bloom)
    def libJar = new File('lib/rivescript-java/build/libs/rivescript-java.jar')

    if (libJar.exists()) {
        copy {
            from "lib/rivescript-java/build/libs/rivescript-java.jar"
            into "lib"
        }
    }
}

compileJava.doLast {
    tasks.prepareSubJar.execute()

    /*copy {
        from "src/main/resources/rivescript"
        into "res"
    }*/
}

startScripts {
    outputs.upToDateWhen { false }

    doFirst {
        delete fileTree(dir:'build/scripts')
        delete fileTree(dir:'build/install')
    }
}

task copyTask(type: Copy) {
    from 'src/main/resources'
    into([project.getProperty('ament.install_space'), 'share', project.name,
            'java', 'res'].join(File.separator))
    from configurations.testRuntime
    into([project.getProperty('ament.install_space'), 'lib', 'java'].join(File.separator))
    from configurations.runtime
    into([project.getProperty('ament.install_space'), 'lib', 'java'].join(File.separator))
    from "lib"
    into([project.getProperty('ament.install_space'), 'lib', 'java'].join(File.separator))
}
assemble.dependsOn copyTask

task compileRivescripts(type: JavaCompile) {
    sourceSets {
        rivescript {
            java {
                srcDir 'src/main/resources/rivescript/src'
            }
            resources {
                srcDir 'src/main/resources/rivescript'
            }
        }
    }

    source = sourceSets.rivescript.java.srcDirs
    include '**/*.java'
    classpath = sourceSets.main.output + sourceSets.main.compileClasspath
    destinationDir = sourceSets.rivescript.output.classesDir
}

task rivescriptsJar(type: Jar) {
    archiveName 'rivescripts.jar'
    from sourceSets.rivescript.output.classesDir
    include '**/*.class'
}

